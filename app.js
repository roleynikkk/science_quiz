// Firebase Firestore functions
import { 
    collection, 
    addDoc, 
    getDocs, 
    updateDoc, 
    deleteDoc, 
    doc, 
    onSnapshot,
    query,
    orderBy
} from 'https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let games = [];
let templateTasks = ["–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∏–ø–ª–æ–º—ã", "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏"];
let currentEditingGameId = null;
let currentGameForTasks = null;
let currentGameForTeams = null;
let currentEditingTeamId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ñ–¥–µ–º –ø–æ–∫–∞ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
    setTimeout(() => {
        if (window.db) {
            console.log('Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
            initializeApp();
            setupEventListeners();
            setupMobileMenu(); // –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
        } else {
            console.error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }, 1000);
});

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
function setupMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const sidebar = document.getElementById('sidebar');
    const mobileOverlay = document.getElementById('mobileOverlay');
    const sidebarClose = document.getElementById('sidebarClose');

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    function openMobileMenu() {
        sidebar.classList.add('open');
        mobileOverlay.style.display = 'block';
        setTimeout(() => mobileOverlay.classList.add('active'), 10);
        document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    function closeMobileMenu() {
        sidebar.classList.remove('open');
        mobileOverlay.classList.remove('active');
        setTimeout(() => {
            mobileOverlay.style.display = 'none';
            document.body.style.overflow = 'auto'; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
        }, 300);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (mobileMenuBtn) {
        mobileMenuBtn.addEventListener('click', openMobileMenu);
    }

    if (sidebarClose) {
        sidebarClose.addEventListener('click', closeMobileMenu);
    }

    if (mobileOverlay) {
        mobileOverlay.addEventListener('click', closeMobileMenu);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
            if (window.innerWidth <= 768) {
                setTimeout(closeMobileMenu, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            }
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    window.addEventListener('resize', () => {
        if (window.innerWidth > 768) {
            closeMobileMenu();
        }
    });
}

function initializeApp() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–ª—Ç–∞–π–º-—Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–≥—Ä
    setupRealtimeListeners();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞—á –∏–∑ localStorage (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ª–æ–∫–∞–ª—å–Ω–æ)
    const savedTasks = localStorage.getItem('scienceQuizTemplateTasks');
    if (savedTasks) {
        templateTasks = JSON.parse(savedTasks);
    } else {
        saveTemplateTasks();
    }

    updateTemplateTasks();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—Ç–∞–π–º-—Å–ª—É—à–∞—Ç–µ–ª–µ–π Firebase
function setupRealtimeListeners() {
    const gamesRef = collection(window.db, 'games');
    const q = query(gamesRef, orderBy('createdAt', 'desc'));

    onSnapshot(q, (snapshot) => {
        games = [];
        snapshot.forEach((doc) => {
            games.push({
                id: doc.id,
                ...doc.data()
            });
        });

        console.log('–ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', games.length);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateDashboard();
        updateGamesTable();
        updateStatistics();
    }, (error) => {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä:", error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    });
}

function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', (e) => {
            const section = e.currentTarget.dataset.section;
            showSection(section);
        });
    });

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    setupModalListeners();

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    document.getElementById('addGameBtn').addEventListener('click', () => {
        openGameModal();
    });

    document.getElementById('addTemplateTaskBtn').addEventListener('click', () => {
        openTaskModal('template');
    });

    // –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
    const addTeamBtn = document.getElementById('addTeamBtn');
    if (addTeamBtn) {
        addTeamBtn.addEventListener('click', () => {
            openTeamModal();
        });
    }

    // –§–æ—Ä–º—ã
    document.getElementById('gameForm').addEventListener('submit', handleGameSubmit);
    document.getElementById('taskForm').addEventListener('submit', handleTaskSubmit);

    const teamForm = document.getElementById('teamForm');
    if (teamForm) {
        teamForm.addEventListener('submit', handleTeamSubmit);
    }

    // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
    document.getElementById('statusFilter').addEventListener('change', filterGames);
    document.getElementById('searchInput').addEventListener('input', filterGames);
}

function setupModalListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.modal-close, .btn-secondary').forEach(btn => {
        btn.addEventListener('click', (e) => {
            if (e.target.id === 'cancelGameBtn' || e.target.classList.contains('modal-close')) {
                closeModal('gameModal');
            }
            if (e.target.id === 'cancelTaskBtn' || e.target.classList.contains('modal-close')) {
                closeModal('taskModal');
            }
            if (e.target.id === 'closeTasksBtn' || e.target.classList.contains('modal-close')) {
                closeModal('tasksModal');
            }
            if (e.target.id === 'cancelTeamBtn' || e.target.classList.contains('modal-close')) {
                closeModal('teamModal');
            }
            if (e.target.id === 'closeTeamsBtn' || e.target.classList.contains('modal-close')) {
                closeModal('teamsModal');
            }
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationClose = document.querySelector('.notification-close');
    if (notificationClose) {
        notificationClose.addEventListener('click', () => {
            document.getElementById('notification').style.display = 'none';
        });
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
function showSection(sectionName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.getElementById(sectionName).classList.add('active');
    document.querySelector(`[data-section="${sectionName}"]`).classList.add('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
function updateDashboard() {
    const totalGames = games.length;
    const upcomingGames = games.filter(game => game.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').length;
    const completedTasks = games.reduce((total, game) => {
        return total + (game.tasks ? game.tasks.filter(task => task.completed).length : 0);
    }, 0);

    document.getElementById('totalGames').textContent = totalGames;
    document.getElementById('upcomingGames').textContent = upcomingGames;
    document.getElementById('completedTasks').textContent = completedTasks;

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä
    updateUpcomingGamesList();
}

function updateUpcomingGamesList() {
    const upcomingGamesContainer = document.getElementById('upcomingGamesList');
    const upcomingGames = games
        .filter(game => game.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞')
        .slice(0, 3);

    if (upcomingGames.length === 0) {
        upcomingGamesContainer.innerHTML = '<p class="no-games">–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä</p>';
        return;
    }

    upcomingGamesContainer.innerHTML = upcomingGames.map(game => {
        const progress = calculateProgress(game);
        return `
            <div class="game-preview-card">
                <h3>${game.name}</h3>
                <div class="game-details">
                    <span>üìÖ ${formatDate(game.date)} –≤ ${game.time}</span>
                    <span>üìç ${game.venue}</span>
                    <span class="status status-${game.status.toLowerCase()}">${game.status}</span>
                </div>
                <div class="progress-mini">
                    <div class="progress-bar-mini">
                        <div class="progress-fill-mini" style="width: ${progress}%"></div>
                    </div>
                    <span>${progress}%</span>
                </div>
            </div>
        `;
    }).join('');
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä –° –ú–û–ë–ò–õ–¨–ù–û–ô –ê–î–ê–ü–¢–ê–¶–ò–ï–ô
function updateGamesTable() {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä, –≤—Å–µ–≥–æ –∏–≥—Ä:', games.length);

    const tbody = document.getElementById('gamesTableBody');
    if (!tbody) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç gamesTableBody');
        return;
    }

    const statusFilter = document.getElementById('statusFilter').value;
    const searchQuery = document.getElementById('searchInput').value.toLowerCase();

    let filteredGames = games;

    if (statusFilter) {
        filteredGames = filteredGames.filter(game => game.status === statusFilter);
    }

    if (searchQuery) {
        filteredGames = filteredGames.filter(game => 
            game.name.toLowerCase().includes(searchQuery)
        );
    }

    if (filteredGames.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="no-data">–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
    tbody.innerHTML = filteredGames.map(game => {
        const progress = calculateProgress(game);
        const statusClass = game.status.toLowerCase().replace(' ', '.');

        return `
            <tr>
                <td>
                    <div style="font-weight: 500;">${game.name}</div>
                    <div class="hide-desktop" style="font-size: 12px; color: #6b6866; margin-top: 4px;">
                        üìÖ ${formatDate(game.date)} ${game.time}<br>
                        üìç ${game.venue}
                    </div>
                </td>
                <td class="hide-mobile">${formatDate(game.date)}</td>
                <td class="hide-mobile">${game.time}</td>
                <td class="hide-mobile">${game.venue}</td>
                <td><span class="status status-${statusClass}">${game.status}</span></td>
                <td class="hide-mobile">
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <span class="progress-text">${progress}%</span>
                    </div>
                </td>
                <td class="actions">
                    <button class="btn-icon" onclick="window.openTasksModal('${game.id}')" title="–ó–∞–¥–∞—á–∏">
                        ‚úì
                    </button>
                    <button class="btn-icon" onclick="window.openTeamsModal('${game.id}')" title="–ö–æ–º–∞–Ω–¥—ã">
                        üë•
                    </button>
                    <button class="btn-icon" onclick="window.editGame('${game.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn-icon" onclick="window.duplicateGame('${game.id}')" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                        üìã
                    </button>
                    <button class="btn-icon danger" onclick="window.deleteGame('${game.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </td>
            </tr>
        `;
    }).join('');

    console.log('–¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç—Ä–æ–∫:', filteredGames.length);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// [–ó–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ app.js]

// Firebase —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä
async function addGame(gameData) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        const tasks = templateTasks.map(taskName => ({
            id: generateId(),
            name: taskName,
            completed: false
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ Firestore —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
        const docRef = await addDoc(collection(window.db, 'games'), {
            ...gameData,
            tasks: tasks,
            teams: [], // –ù–û–í–û–ï: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
            createdAt: new Date()
        });

        console.log("–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: ", docRef.id);
        showNotification('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        closeModal('gameModal');

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã: ", error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
}

async function updateGame(gameId, updateData) {
    try {
        const gameRef = doc(window.db, 'games', gameId);
        await updateDoc(gameRef, updateData);
        showNotification('–ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        closeModal('gameModal');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã: ", error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
}

async function deleteGame(gameId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?')) {
        return;
    }

    try {
        await deleteDoc(doc(window.db, 'games', gameId));
        showNotification('–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã: ", error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
}

async function updateGameTasks(gameId, tasks) {
    try {
        const gameRef = doc(window.db, 'games', gameId);
        await updateDoc(gameRef, { tasks: tasks });
        showNotification('–ó–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: ", error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á');
    }
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ú–ê–ù–î–ê–ú–ò
async function updateGameTeams(gameId, teams) {
    try {
        const gameRef = doc(window.db, 'games', gameId);
        await updateDoc(gameRef, { teams: teams });
        showNotification('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: ", error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥');
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ —Ñ–æ—Ä–º—ã
function openGameModal(gameId = null) {
    currentEditingGameId = gameId;
    const modal = document.getElementById('gameModal');
    const title = document.getElementById('gameModalTitle');
    const form = document.getElementById('gameForm');

    if (gameId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É';
        const game = games.find(g => g.id === gameId);
        if (game) {
            document.getElementById('gameName').value = game.name;
            document.getElementById('gameDate').value = game.date;
            document.getElementById('gameTime').value = game.time;
            document.getElementById('gameVenue').value = game.venue;
            document.getElementById('gameStatus').value = game.status;
        }
    } else {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É';
        form.reset();
        document.getElementById('gameStatus').value = '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è';
    }

    modal.style.display = 'flex';
}

function openTasksModal(gameId) {
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –∏–≥—Ä—ã:', gameId);
    currentGameForTasks = gameId;
    const game = games.find(g => g.id === gameId);
    if (!game) {
        console.error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', gameId);
        return;
    }

    document.getElementById('tasksModalTitle').textContent = `–ó–∞–¥–∞—á–∏ –¥–ª—è –∏–≥—Ä—ã: ${game.name}`;
    updateTasksList();

    document.getElementById('tasksModal').style.display = 'flex';
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥
function openTeamsModal(gameId) {
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–≥—Ä—ã:', gameId);
    currentGameForTeams = gameId;
    currentEditingTeamId = null;
    const game = games.find(g => g.id === gameId);
    if (!game) {
        console.error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', gameId);
        return;
    }

    document.getElementById('teamsModalTitle').textContent = `–ö–æ–º–∞–Ω–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${game.name}`;
    updateTeamsList();

    document.getElementById('teamsModal').style.display = 'flex';
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
function openTeamModal(teamId = null) {
    currentEditingTeamId = teamId;
    const modal = document.getElementById('teamModal');
    const title = document.getElementById('teamModalTitle');
    const form = document.getElementById('teamForm');

    if (teamId && currentGameForTeams) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const game = games.find(g => g.id === currentGameForTeams);
        const team = game?.teams?.find(t => t.id === teamId);

        if (team) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É';
            document.getElementById('teamName').value = team.name;
            document.getElementById('teamMemberCount').value = team.memberCount;
            document.getElementById('teamCaptainLink').value = team.captainSocialLink || '';
        }
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É';
        form.reset();
    }

    modal.style.display = 'flex';
}

function openTaskModal(type) {
    document.getElementById('taskModal').style.display = 'flex';
    document.getElementById('taskForm').reset();
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
    if (modalId === 'gameModal') currentEditingGameId = null;
    if (modalId === 'tasksModal') currentGameForTasks = null;
    if (modalId === 'teamsModal') {
        currentGameForTeams = null;
        currentEditingTeamId = null;
    }
    if (modalId === 'teamModal') currentEditingTeamId = null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
async function handleGameSubmit(e) {
    e.preventDefault();

    const gameData = {
        name: document.getElementById('gameName').value,
        date: document.getElementById('gameDate').value,
        time: document.getElementById('gameTime').value,
        venue: document.getElementById('gameVenue').value,
        status: document.getElementById('gameStatus').value
    };

    if (currentEditingGameId) {
        await updateGame(currentEditingGameId, gameData);
    } else {
        await addGame(gameData);
    }
}

async function handleTaskSubmit(e) {
    e.preventDefault();

    const taskName = document.getElementById('taskName').value;

    if (currentGameForTasks) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ
        const game = games.find(g => g.id === currentGameForTasks);
        if (game) {
            const newTask = {
                id: generateId(),
                name: taskName,
                completed: false
            };
            const updatedTasks = [...(game.tasks || []), newTask];
            await updateGameTasks(currentGameForTasks, updatedTasks);
            updateTasksList();
        }
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ —à–∞–±–ª–æ–Ω—É
        templateTasks.push(taskName);
        saveTemplateTasks();
        updateTemplateTasks();
    }

    closeModal('taskModal');
}

// –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã
async function handleTeamSubmit(e) {
    e.preventDefault();

    const teamData = {
        name: document.getElementById('teamName').value,
        memberCount: parseInt(document.getElementById('teamMemberCount').value),
        captainSocialLink: document.getElementById('teamCaptainLink').value || null
    };

    if (!currentGameForTeams) return;

    const game = games.find(g => g.id === currentGameForTeams);
    if (!game) return;

    let updatedTeams = [...(game.teams || [])];

    if (currentEditingTeamId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        const teamIndex = updatedTeams.findIndex(t => t.id === currentEditingTeamId);
        if (teamIndex !== -1) {
            updatedTeams[teamIndex] = {
                ...updatedTeams[teamIndex],
                ...teamData
            };
        }
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        const newTeam = {
            id: generateId(),
            number: updatedTeams.length + 1,
            ...teamData
        };
        updatedTeams.push(newTeam);
    }

    await updateGameTeams(currentGameForTeams, updatedTeams);
    updateTeamsList();
    closeModal('teamModal');
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML
function updateTasksList() {
    if (!currentGameForTasks) return;

    const game = games.find(g => g.id === currentGameForTasks);
    if (!game) return;

    const tasks = game.tasks || [];
    const completed = tasks.filter(t => t.completed).length;
    const progress = tasks.length > 0 ? Math.round((completed / tasks.length) * 100) : 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    document.getElementById('tasksProgress').style.width = progress + '%';
    document.getElementById('tasksProgressText').textContent = progress + '%';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê HTML
    const tasksList = document.getElementById('gameTasksList');
    tasksList.innerHTML = tasks.map(task => `
        <div class="task-item">
            <label class="task-checkbox">
                <input type="checkbox" ${task.completed ? 'checked' : ''} 
                       onchange="window.toggleTask('${game.id}', '${task.id}')">
                <span class="task-text ${task.completed ? 'completed' : ''}">${task.name}</span>
            </label>
            <button class="btn-icon danger" onclick="window.removeTask('${game.id}', '${task.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        </div>
    `).join('');
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
function updateTeamsList() {
    if (!currentGameForTeams) return;

    const game = games.find(g => g.id === currentGameForTeams);
    if (!game) return;

    const teams = game.teams || [];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalTeams = teams.length;
    const totalParticipants = teams.reduce((sum, team) => sum + team.memberCount, 0);

    document.getElementById('totalTeams').textContent = totalTeams;
    document.getElementById('totalParticipants').textContent = totalParticipants;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–∞–Ω–¥
    const teamsTableBody = document.getElementById('teamsTableBody');

    if (teams.length === 0) {
        teamsTableBody.innerHTML = '<tr><td colspan="5" class="no-teams">–ö–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</td></tr>';
        return;
    }

    teamsTableBody.innerHTML = teams.map(team => `
        <tr>
            <td><span class="team-number">${team.number}</span></td>
            <td>
                <span class="team-name">${team.name}</span>
                <div class="hide-desktop" style="font-size: 12px; color: #6b6866; margin-top: 4px;">
                    üë• ${team.memberCount} —á–µ–ª.
                    ${team.captainSocialLink ? '<br>üîó –ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' : '<br>üìù –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞'}
                </div>
            </td>
            <td class="hide-mobile"><span class="team-count">${team.memberCount}</span></td>
            <td class="hide-mobile">
                ${team.captainSocialLink ? 
                    `<a href="${team.captainSocialLink}" target="_blank" class="captain-link">–ü–µ—Ä–µ–π—Ç–∏</a>` : 
                    '<span class="captain-none">–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>'
                }
            </td>
            <td class="team-actions">
                <button class="btn-icon" onclick="window.editTeam('${team.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                <button class="btn-icon danger" onclick="window.removeTeam('${team.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </td>
        </tr>
    `).join('');
}

async function toggleTask(gameId, taskId) {
    const game = games.find(g => g.id === gameId);
    if (!game) return;

    const tasks = game.tasks.map(task => {
        if (task.id === taskId) {
            return { ...task, completed: !task.completed };
        }
        return task;
    });

    await updateGameTasks(gameId, tasks);
    updateTasksList();
}

async function removeTask(gameId, taskId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) return;

    const game = games.find(g => g.id === gameId);
    if (!game) return;

    const tasks = game.tasks.filter(task => task.id !== taskId);
    await updateGameTasks(gameId, tasks);
    updateTasksList();
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
function editTeam(teamId) {
    openTeamModal(teamId);
}

async function removeTeam(teamId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É?')) return;

    if (!currentGameForTeams) return;

    const game = games.find(g => g.id === currentGameForTeams);
    if (!game) return;

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞
    let updatedTeams = (game.teams || []).filter(team => team.id !== teamId);

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
    updatedTeams = updatedTeams.map((team, index) => ({
        ...team,
        number: index + 1
    }));

    await updateGameTeams(currentGameForTeams, updatedTeams);
    updateTeamsList();
}

// –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞—á - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML
function updateTemplateTasks() {
    const container = document.getElementById('templateTasksList');
    container.innerHTML = templateTasks.map((task, index) => `
        <div class="task-item">
            <span class="task-text">${task}</span>
            <button class="btn-icon danger" onclick="window.removeTemplateTask(${index})" title="–£–¥–∞–ª–∏—Ç—å">
                üóëÔ∏è
            </button>
        </div>
    `).join('');
}

function removeTemplateTask(index) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É –∏–∑ —à–∞–±–ª–æ–Ω–∞?')) return;

    templateTasks.splice(index, 1);
    saveTemplateTasks();
    updateTemplateTasks();
}

function saveTemplateTasks() {
    localStorage.setItem('scienceQuizTemplateTasks', JSON.stringify(templateTasks));
}

// –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function editGame(gameId) {
    openGameModal(gameId);
}

async function duplicateGame(gameId) {
    const game = games.find(g => g.id === gameId);
    if (!game) return;

    const newGame = {
        ...game,
        name: game.name + ' (–∫–æ–ø–∏—è)',
        date: '',
        status: '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'
    };

    delete newGame.id;
    delete newGame.createdAt;

    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
    if (newGame.tasks) {
        newGame.tasks = newGame.tasks.map(task => ({
            ...task,
            completed: false,
            id: generateId()
        }));
    }

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–ø–∏–∏
    newGame.teams = [];

    await addGame(newGame);
}

function filterGames() {
    updateGamesTable();
}

function updateStatistics() {
    const totalCompleted = games.filter(game => game.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').length;
    const totalPlanned = games.filter(game => game.status === '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è').length;

    const totalTasks = games.reduce((sum, game) => sum + (game.tasks?.length || 0), 0);
    const completedTasks = games.reduce((sum, game) => 
        sum + (game.tasks?.filter(task => task.completed).length || 0), 0);

    const overallProgress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;

    document.getElementById('totalCompletedGames').textContent = totalCompleted;
    document.getElementById('totalPlannedGames').textContent = totalPlanned;
    document.getElementById('overallProgress').textContent = overallProgress + '%';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateProgress(game) {
    if (!game.tasks || game.tasks.length === 0) return 0;
    const completed = game.tasks.filter(task => task.completed).length;
    return Math.round((completed / game.tasks.length) * 100);
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const text = document.getElementById('notificationText');

    text.textContent = message;
    notification.className = `notification ${type}`;
    notification.style.display = 'block';

    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.openTasksModal = openTasksModal;
window.openTeamsModal = openTeamsModal;
window.editGame = editGame;
window.duplicateGame = duplicateGame;
window.deleteGame = deleteGame;
window.toggleTask = toggleTask;
window.removeTask = removeTask;
window.removeTemplateTask = removeTemplateTask;
window.editTeam = editTeam;
window.removeTeam = removeTeam;

console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–µ—Ä ScienceQuiz –∑–∞–≥—Ä—É–∂–µ–Ω');